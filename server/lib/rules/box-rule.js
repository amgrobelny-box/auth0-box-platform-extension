module.exports = `/*
*  This rule been automatically generated by the auth0-box-platform extension on <%= updateTime() %>
*/
function(user, context, callback) {
   user.app_metadata = user.app_metadata || {};
   if (!user.app_metadata.box_id) {
     var BoxConstants = {
       HEADERS: {
         V2_AUTH_ACCESS: "Bearer"
       },
       DEFAULT_SETTINGS: {
         JWT_EXPIRATION: '10s',
         JWT_ALGORITHM: "RS256",
         JWT_TYPE: "JWT",
         JWT_GRANT_TYPE: "urn:ietf:params:oauth:grant-type:jwt-bearer"
       },
       BASE_URL: "https://api.box.com/oauth2/token",
       APP_USERS_URL: "https://api.box.com/2.0/users",
       ENTERPRISE: "enterprise"
     };

     var BoxConfig = {
       clientId: '<%= BOX_CLIENT_ID %>',
       clientSecret: '<%= BOX_CLIENT_SECRET %>',
       enterpriseId: '<%= BOX_ENTERPRISE_ID %>',
       jwtPublicKeyId: '<%= BOX_PUBLIC_KEY_ID %>'
     };

     var signingCert =  '<%= BOX_SIGNING_CERT %>';
     var signingCertPassword = '<%= BOX_SIGNING_CERT_PASSWORD %>';
     var cert = getSigningCert(signingCert, signingCertPassword);

     var jwtPackage = {
       iss: '<%= BOX_CLIENT_ID %>',
       aud: BoxConstants.BASE_URL,
       jti: uuid.v4(),
       sub: '<%= BOX_ENTERPRISE_ID %>',
       box_sub_type: BoxConstants.ENTERPRISE,
       exp: Math.floor(Date.now() / 1000 + 30)
     };

     var jws = require('jws');
     var token = jws.sign({
       privateKey: cert,
       header: {
         typ: BoxConstants.DEFAULT_SETTINGS.JWT_TYPE,
         kid: '<%= BOX_PUBLIC_KEY_ID %>',
         alg: BoxConstants.DEFAULT_SETTINGS.JWT_ALGORITHM
       },
       payload: jwtPackage
     });

     var formData = {
       grant_type: BoxConstants.DEFAULT_SETTINGS.JWT_GRANT_TYPE,
       client_id: '<%= BOX_CLIENT_ID %>',
       client_secret: '<%= BOX_CLIENT_SECRET %>',
       assertion: token
     };

     request.post({ url: BoxConstants.BASE_URL, form: formData }, function(err, resp) {
       if (err) {
         console.log('Error authenticating to Box:', err);
         return callback(err);
       }

       console.log('Retrieving Enterprise token...');

       var enterpriseToken = JSON.parse(resp.body).access_token;
       var options = {
         headers: {
           'Authorization': 'Bearer ' + enterpriseToken
         },
         url: BoxConstants.APP_USERS_URL,
         json: {
           name: user.email,
           is_platform_access_only: true
         }
       };

       request.post(options, function(err, resp) {
         console.log('Creating a new app user...');

         if (err) {
           console.log('Error creating Box App User:', err);
           return callback(err);
         }

         return auth0.users.updateAppMetadata(user.user_id, { box_id: resp.body.id }, function(err, updatedUser) {
           callback(null, updatedUser, context);
         });
       });
     });
   } else {
     callback(null, user, context);
   }

   function getSigningCert(cert, password) {
     if (password && password.length) {
       return {
         key: new Buffer(cert, 'base64').toString('ascii'),
         passphrase: password
       };
     }

     return new Buffer(cert, 'base64').toString('ascii');
   }
}`;
